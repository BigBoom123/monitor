{
  "nodes": [
    {
      "parameters": {},
      "id": "5252452c-370d-4a07-b636-14a8ceaf7b72",
      "name": "Start Manually",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [-2656, 576]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS sync_state ( key TEXT PRIMARY KEY, value TIMESTAMPTZ );\nCREATE TABLE IF NOT EXISTS salesfull_v1 (\n  _id TEXT PRIMARY KEY,\n  auction_id TEXT,\n  date_modified TIMESTAMPTZ,\n  title JSONB,\n  value_amount NUMERIC,\n  value_currency TEXT,\n  tender_period JSONB,\n  selling_entity JSONB,\n  registration_details JSONB,\n  classification JSONB,\n  qualification_period JSONB,\n  status TEXT,\n  registration_status TEXT,\n  registration_id TEXT,\n  registration_date TIMESTAMPTZ,\n  raw JSONB\n);",
        "options": {}
      },
      "id": "0c36b1e5-ac27-4496-b6d3-233e7f3285ed",
      "name": "Postgres: Migrate",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [-2416, 576],
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH last AS (SELECT MAX(date_modified) AS max_dm FROM salesfull_v1)\nSELECT\n  COALESCE(\n    (SELECT value FROM sync_state WHERE key='prozorro_last_sync'),\n    (SELECT max_dm FROM last),\n    '2025-01-01T00:00:00Z'::timestamptz\n  ) AS sync_date,\n  COALESCE(\n    (SELECT value FROM sync_state WHERE key='prozorro_month_end'),\n    date_trunc('month', COALESCE((SELECT max_dm FROM last), '2025-01-01T00:00:00Z'::timestamptz)) + INTERVAL '1 month'\n  ) AS month_end;\n",
        "options": {}
      },
      "id": "822b7c77-9756-4a8a-9af0-7307c73210d6",
      "name": "Postgres: Get Sync Date",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [-2192, 576],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "syncDate",
              "value": "={{$json.sync_date}}"
            },
            {
              "name": "monthEnd",
              "value": "={{$json.month_end}}"
            }
          ]
        },
        "options": {}
      },
      "id": "84472094-e312-43a5-8724-8f3e032b5878",
      "name": "Set: Prepare Sync Date",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [-1984, 576]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let v = ($json.syncDate ?? '2025-01-01T00:00:00.000000Z').toString().trim();\nif (/\\.\\d{3}Z$/.test(v)) v = v.replace('Z','000Z');\nv = v.replace(/\\s+/g,'');\nreturn { json: { ...$json, formattedSyncDate: v } };"
      },
      "id": "94dd8d8b-49f0-403a-9370-9b4b32a7e4b6",
      "name": "Normalize syncDate",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1792, 576]
    },
    {
      "parameters": {
        "url": "=https://procedure.prozorro.sale/api/search/byDateModified/{{$json.formattedSyncDate}}?limit=100",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 60000
        }
      },
      "id": "d63d974e-a1ce-499e-8f12-00303d36db40",
      "name": "HTTP: Get Auction List",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [-1568, 576]
    },
    {
      "parameters": {
        "jsCode": "const list = $items('HTTP: Get Auction List').map(i=>i.json);\nconst dateItem = $('Normalize syncDate').first();\nconst formatted = dateItem?.json?.formattedSyncDate ?? '2025-01-01T00:00:00.000000Z';\nreturn list.map(o=>({ json: { ...o, formattedSyncDate: formatted } }));"
      },
      "id": "1755dd9a-4590-4dc9-9bd5-d4ff0367dcf5",
      "name": "Code: Add formattedSyncDate",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1328, 576]
    },
    {
      "parameters": {
        "workflowId": "JMhto9IGq0rSQinb",
        "options": {}
      },
      "id": "e2b3ab83-1fce-4954-b9c5-47b3c220dafe",
      "name": "Execute Workflow: ProcessPage",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [-1056, 576],
      "notesInFlow": true
    },
    {
      "parameters": {
        "jsCode": "const list = $items('HTTP: Get Auction List').map(i=>i.json);\nconst monthEnd = new Date($('Code: Compute Month Bounds').first().json.monthEndNorm).getTime();\nif (!list.length) {\n  const nowIso = new Date().toISOString().replace(/\\.(\\d{3})Z$/, '.$1000Z');\n  const hitMonthEnd = new Date(nowIso).getTime() >= monthEnd;\n  return [{ json: { count: 0, nextSyncDate: nowIso, hitMonthEnd } }];\n}\nconst last = list[list.length-1];\nconst dm = last.dateModified ?? last.date_modified;\nconst d = new Date(dm);\nif (isNaN(d.getTime())){\n  const nowIso = new Date().toISOString().replace(/\\.(\\d{3})Z$/, '.$1000Z');\n  const hitMonthEnd = new Date(nowIso).getTime() >= monthEnd;\n  return [{ json: { count: list.length, nextSyncDate: nowIso, hitMonthEnd } }];\n}\nd.setMilliseconds(d.getMilliseconds()+1);\nconst iso = d.toISOString().replace(/\\.(\\d{3})Z$/, '.$1000Z');\nconst hitMonthEnd = new Date(iso).getTime() >= monthEnd;\nreturn [{ json: { count: list.length, nextSyncDate: iso, hitMonthEnd } }];\n"
      },
      "id": "d929adbd-116b-4f9d-9df8-6f0efa33eb0d",
      "name": "Compute Next Sync Date",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-528, 576]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.count}}",
              "operation": "equal",
              "value2": 100
            }
          ]
        }
      },
      "id": "4cb18e55-b619-45b0-86a9-6477e6311494",
      "name": "Were there 100 results?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-176, 592]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "syncDate",
              "value": "={{$json.nextSyncDate}}"
            }
          ]
        },
        "options": {}
      },
      "id": "b3c074e8-2a6d-4105-84ff-d86d65a7132a",
      "name": "Set: New Sync Date",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [-1392, 784]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO sync_state (key,value) VALUES ('prozorro_last_sync',$1::timestamptz)\nON CONFLICT (key) DO UPDATE SET value=EXCLUDED.value;",
        "options": {
          "queryReplacement": "={{ [ $json.syncDate ?? $json.nextSyncDate ] }}"
        }
      },
      "id": "0a4cace7-1153-49e3-b232-546a580f78a7",
      "name": "Postgres: Save Last Date",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [384, 640],
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "id": "3468c48f-f705-4e26-94a3-53fa88287a40",
      "name": "End of Loop",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [816, 672]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const sd = new Date($json.syncDate || '2025-01-01T00:00:00.000000Z');\nif (isNaN(sd.getTime())) throw new Error('Invalid syncDate: ' + $json.syncDate);\n\nfunction isoMonthStart(d){\n  return new Date(Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), 1)).toISOString();\n}\n\nfunction isoNextMonthStart(d){\n  return new Date(Date.UTC(d.getUTCFullYear(), d.getUTCMonth() + 1, 1)).toISOString();\n}\n\nconst monthStart = isoMonthStart(sd);\n// Эта строка - главное исправление. Теперь граница месяца всегда\n// вычисляется на основе даты синхронизации, а не берется из базы.\nlet monthEndNorm = isoNextMonthStart(sd);\n\n// current month start\nconst now = new Date();\nconst currentMonthStart = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), 1)).toISOString();\nconst isLivePhase = new Date(monthEndNorm) > new Date(currentMonthStart);\nconst nextMonthStart = isoNextMonthStart(new Date(monthStart));\n\nreturn { json: { ...$json, monthStart, monthEnd: monthEndNorm, monthEndNorm, nextMonthStart, currentMonthStart, isLivePhase } };"
      },
      "id": "ffcc8682-cff6-471f-888d-538f648126b2",
      "name": "Code: Compute Month Bounds",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1888, 768]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Allow all in LIVE mode; otherwise keep only dateModified < monthEnd\nconst monthEnd = $('Code: Compute Month Bounds').first().json.monthEndNorm;\nconst isLive = $('Code: Compute Month Bounds').first().json.isLivePhase;\nconst dm = new Date(($json.dateModified ?? $json.date_modified));\nif (isLive) return $json;\nif (!dm || isNaN(dm.getTime())) return null;\nif (dm.toISOString() < new Date(monthEnd).toISOString()) return $json;\nreturn null; // drop outside month window\n"
      },
      "id": "886dee0f-d723-49a7-8323-0046d16452b0",
      "name": "Code: Filter to Month Window",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1200, 464],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.hitMonthEnd}}",
              "value2": true
            }
          ]
        }
      },
      "id": "3aabc29b-4935-4bba-a582-1afe9eace903",
      "name": "IF: Hit Month End?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-368, 464]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "syncDate",
              "value": "={{$('Code: Compute Month Bounds').first().json.monthEndNorm}}"
            }
          ]
        },
        "options": {}
      },
      "id": "54f01b6e-e379-4166-bcdd-7bfdb9210b6c",
      "name": "Set: Sync To Month End",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [144, 336]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO sync_state (key,value) VALUES ('prozorro_month_end', ='{{ $('Code: Compute Month Bounds').first().json.nextMonthStart }}'::timestamptz )\nON CONFLICT (key) DO UPDATE SET value=EXCLUDED.value;",
        "options": {}
      },
      "id": "cea775d8-6571-49d8-bf79-21a71954faf8",
      "name": "Postgres: Save Month End",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [592, 336],
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO sync_state (key,value) VALUES ('prozorro_last_sync',$1::timestamptz)\nON CONFLICT (key) DO UPDATE SET value=EXCLUDED.value;",
        "options": {
          "queryReplacement": "={{ [ $json.syncDate ?? $json.nextSyncDate ] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-1584, 784],
      "id": "6af494f7-3c47-49f6-9c2e-aa5683dde719",
      "name": "Save_date_100_items_and_Continue",
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    }
  ],
  "connections": {
    "Start Manually": {
      "main": [
        [
          {
            "node": "Postgres: Migrate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Migrate": {
      "main": [
        [
          {
            "node": "Postgres: Get Sync Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Get Sync Date": {
      "main": [
        [
          {
            "node": "Set: Prepare Sync Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Prepare Sync Date": {
      "main": [
        [
          {
            "node": "Code: Compute Month Bounds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize syncDate": {
      "main": [
        [
          {
            "node": "HTTP: Get Auction List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Get Auction List": {
      "main": [
        [
          {
            "node": "Code: Add formattedSyncDate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Add formattedSyncDate": {
      "main": [
        [
          {
            "node": "Code: Filter to Month Window",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow: ProcessPage": {
      "main": [
        [
          {
            "node": "Compute Next Sync Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compute Next Sync Date": {
      "main": [
        [
          {
            "node": "IF: Hit Month End?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Were there 100 results?": {
      "main": [
        [
          {
            "node": "Save_date_100_items_and_Continue",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres: Save Last Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: New Sync Date": {
      "main": [
        [
          {
            "node": "Normalize syncDate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Save Last Date": {
      "main": [
        [
          {
            "node": "End of Loop",
            "type": "main",
            "index": 0
          },
          {
            "node": "Postgres: Save Month End",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Compute Month Bounds": {
      "main": [
        [
          {
            "node": "Normalize syncDate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Filter to Month Window": {
      "main": [
        [
          {
            "node": "Execute Workflow: ProcessPage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Hit Month End?": {
      "main": [
        [
          {
            "node": "Set: Sync To Month End",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Were there 100 results?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Sync To Month End": {
      "main": [
        [
          {
            "node": "Postgres: Save Last Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Save Month End": {
      "main": [
        [
          {
            "node": "End of Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save_date_100_items_and_Continue": {
      "main": [
        [
          {
            "node": "Set: New Sync Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Start Manually": [{}]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b5da3b60b2aef7f21cd63bb95b2dbf30be48f0e39c2c264cd2d36f457483d3a4"
  }
}
