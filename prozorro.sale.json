{
  "nodes": [
    {
      "parameters": {},
      "id": "72912138-baba-4b71-b55d-06c8fc46da2b",
      "name": "Start Manually",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [-2368, 112]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS sync_state ( key TEXT PRIMARY KEY, value TIMESTAMPTZ );\nCREATE TABLE IF NOT EXISTS procedures (\n  _id TEXT PRIMARY KEY,\n  auction_id TEXT,\n  date_modified TIMESTAMPTZ,\n  title JSONB,\n  value_amount NUMERIC,\n  value_currency TEXT,\n  tender_period JSONB,\n  selling_entity JSONB,\n  raw JSONB\n);",
        "options": {}
      },
      "id": "2802d872-326a-4772-92b1-fd705dc07280",
      "name": "Postgres: Migrate",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [-2128, 112],
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COALESCE((SELECT value FROM sync_state WHERE key='prozorro_last_sync'),'2025-01-01T00:00:00.000000Z'::timestamptz) AS sync_date;",
        "options": {}
      },
      "id": "69dbb619-eac6-41ab-a079-548e9db1c25a",
      "name": "Postgres: Get Sync Date",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [-1904, 112],
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "syncDate",
              "value": "={{$json.sync_date}}"
            }
          ]
        },
        "options": {}
      },
      "id": "06ed0ee6-5270-4383-aa45-bebf26b5b5d9",
      "name": "Set: Prepare Sync Date",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [-1696, 112]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let v = ($json.syncDate ?? '2025-01-01T00:00:00.000000Z').toString().trim();\nif (/\\.\\d{3}Z$/.test(v)) v = v.replace('Z','000Z');\nv = v.replace(/\\s+/g,'');\nreturn { json: { ...$json, formattedSyncDate: v } };"
      },
      "id": "ac47b90c-7e0f-4a03-9a91-f9823991398d",
      "name": "Normalize syncDate",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1504, 112]
    },
    {
      "parameters": {
        "url": "=https://procedure.prozorro.sale/api/search/byDateModified/{{$json.formattedSyncDate}}?limit=100",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 60000
        }
      },
      "id": "18d2da5b-7551-4086-a673-aa92e3d6cef9",
      "name": "HTTP: Get Auction List",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [-1280, 112]
    },
    {
      "parameters": {
        "jsCode": "const list = $items('HTTP: Get Auction List').map(i=>i.json);\nconst dateItem = $('Normalize syncDate').first();\nconst formatted = dateItem?.json?.formattedSyncDate ?? '2025-01-01T00:00:00.000000Z';\nreturn list.map(o=>({ json: { ...o, formattedSyncDate: formatted } }));"
      },
      "id": "5df7faac-040e-48b1-b1b9-025107dfba1e",
      "name": "Code: Add formattedSyncDate",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1040, 112]
    },
    {
      "parameters": {
        "url": "={{ 'https://procedure.prozorro.sale/api/procedures/' +\n    encodeURIComponent(String($json._id ?? $json.auctionId ?? $json.id).trim()) }}\n",
        "options": {
          "timeout": 60000
        }
      },
      "id": "a90a9370-c8a8-40c2-ae7c-756d92c5740d",
      "name": "HTTP: Get Auction Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [-720, 480]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = $json;\nconst locality = (data.sellingEntity?.address?.locality?.uk_UA || '').toLowerCase();\nconst targetLocalities = ['київ','вишгород','ірпінь'];\nconst isMatch = targetLocalities.includes(locality);\nreturn { json: { ...data, isRegionMatch: isMatch } };"
      },
      "id": "cb7760e7-c32c-41d4-aecf-24635b380a0f",
      "name": "Проверка Региона",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-528, 480]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.isRegionMatch}}",
              "value2": true
            }
          ],
          "dateTime": [
            {
              "value1": "={{$json.tenderPeriod.startDate}}",
              "value2": "={{$now}}"
            }
          ],
          "number": [
            {
              "value1": "={{$json.value.amount}}",
              "operation": "smallerEqual",
              "value2": 4000000
            }
          ]
        }
      },
      "id": "43f0998b-3ebb-4dd7-baf3-1aeb62f8806d",
      "name": "Filter Auctions",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-320, 480]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "titleText",
              "value": "={{$json.title.uk_UA}}"
            },
            {
              "name": "priceText",
              "value": "={{$json.value.amount}} {{$json.value.currency}}"
            },
            {
              "name": "auctionUrl",
              "value": "=https://prozorro.sale/auction/{{$json.auctionId}}"
            }
          ]
        },
        "options": {}
      },
      "id": "b1588caa-ebb4-436e-b626-90be12421d31",
      "name": "Set: Telegram Payload",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [-144, 368]
    },
    {
      "parameters": {
        "chatId": "-1002767927753",
        "text": "🔥 *Новий аукціон Prozorro.Sale!*\n\n*Назва:* {{$json.titleText}}\n*Стартова ціна:* {{$json.priceText}}\n*Посилання:* {{$json.auctionUrl}}",
        "additionalFields": {}
      },
      "id": "1bca14f5-423f-4a3a-883b-6843269d1809",
      "name": "Send Telegram Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [64, 368],
      "webhookId": "ef0b88fb-8901-4412-97f6-0d7230212af6",
      "credentials": {
        "telegramApi": {
          "id": "LuJyyclSEglS2sAm",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO procedures (_id, auction_id, date_modified, title, value_amount, value_currency, tender_period, selling_entity, raw)\nVALUES ($1, $2, $3::timestamptz, $4::jsonb, $5::numeric, $6::text, $7::jsonb, $8::jsonb, $9::jsonb)\nON CONFLICT (_id) DO UPDATE SET auction_id=EXCLUDED.auction_id, date_modified=EXCLUDED.date_modified, title=EXCLUDED.title, value_amount=EXCLUDED.value_amount, value_currency=EXCLUDED.value_currency, tender_period=EXCLUDED.tender_period, selling_entity=EXCLUDED.selling_entity, raw=EXCLUDED.raw;",
        "options": {
          "queryReplacement": "={{$json[\"_id\"]}}, {{$json[\"auctionId\"]}}, {{$json[\"dateModified\"] || $json[\"date_modified\"]}}, {{JSON.stringify($json[\"title\"])}}, {{$json[\"value\"]?.[\"amount\"]}}, {{$json[\"value\"]?.[\"currency\"]}}, {{JSON.stringify($json[\"tenderPeriod\"] || $json[\"tender_period\"])}}, {{JSON.stringify($json[\"sellingEntity\"] || $json[\"selling_entity\"])}}, {{JSON.stringify($json)}}"
        }
      },
      "id": "23e52449-edfa-4df3-ae7f-646c954608ef",
      "name": "Postgres: Upsert Procedure",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [64, 560],
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "id": "3af413dc-2013-4f36-b3db-cfddb69e940a",
      "name": "Next Batch",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [256, 560]
    },
    {
      "parameters": {
        "jsCode": "const list = $items('HTTP: Get Auction List').map(i=>i.json);\nif (!list.length) {\n  const nowIso = new Date().toISOString().replace(/\\.(\\d{3})Z$/, '.$1000Z');\n  return [{ json: { count: 0, nextSyncDate: nowIso } }];\n}\nconst last = list[list.length-1];\nconst dm = last.dateModified ?? last.date_modified;\nconst d = new Date(dm);\nif (isNaN(d.getTime())){\n  const nowIso = new Date().toISOString().replace(/\\.(\\d{3})Z$/, '.$1000Z');\n  return [{ json: { count: list.length, nextSyncDate: nowIso } }];\n}\nd.setMilliseconds(d.getMilliseconds()+1);\nconst iso = d.toISOString().replace(/\\.(\\d{3})Z$/, '.$1000Z');\nreturn [{ json: { count: list.length, nextSyncDate: iso } }];"
      },
      "id": "5d3af7f2-4af2-403e-b399-1fa455777080",
      "name": "Compute Next Sync Date",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-720, -240]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.count}}",
              "operation": "equal",
              "value2": 100
            }
          ]
        }
      },
      "id": "2a3f4262-8994-4dfb-aff2-697dc85613e8",
      "name": "Were there 100 results?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-480, -240]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "syncDate",
              "value": "={{$json.nextSyncDate}}"
            }
          ]
        },
        "options": {}
      },
      "id": "11fb0a37-3ccb-484e-a410-7785cb7766f2",
      "name": "Set: New Sync Date",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [-368, -464]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO sync_state (key,value) VALUES ('prozorro_last_sync',$1::timestamptz)\nON CONFLICT (key) DO UPDATE SET value=EXCLUDED.value;",
        "options": {}
      },
      "id": "f2a06595-1352-4dee-93fa-8dff44e8dc3c",
      "name": "Postgres: Save Last Date",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [-256, -144],
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "id": "2bbb6f4b-b418-4c36-ae87-67758d984a5e",
      "name": "End of Loop",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [-64, -144]
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [-832, 112],
      "id": "890ce009-642f-4c1d-8030-6bdd2e04f1da",
      "name": "Loop Over Items1",
      "notesInFlow": true
    }
  ],
  "connections": {
    "Start Manually": {
      "main": [
        [
          {
            "node": "Postgres: Migrate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Migrate": {
      "main": [
        [
          {
            "node": "Postgres: Get Sync Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Get Sync Date": {
      "main": [
        [
          {
            "node": "Set: Prepare Sync Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Prepare Sync Date": {
      "main": [
        [
          {
            "node": "Normalize syncDate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize syncDate": {
      "main": [
        [
          {
            "node": "HTTP: Get Auction List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Get Auction List": {
      "main": [
        [
          {
            "node": "Code: Add formattedSyncDate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Add formattedSyncDate": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Get Auction Details": {
      "main": [
        [
          {
            "node": "Проверка Региона",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Проверка Региона": {
      "main": [
        [
          {
            "node": "Filter Auctions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Auctions": {
      "main": [
        [
          {
            "node": "Set: Telegram Payload",
            "type": "main",
            "index": 0
          },
          {
            "node": "Postgres: Upsert Procedure",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres: Upsert Procedure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Telegram Payload": {
      "main": [
        [
          {
            "node": "Send Telegram Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Upsert Procedure": {
      "main": [
        [
          {
            "node": "Next Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Next Batch": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compute Next Sync Date": {
      "main": [
        [
          {
            "node": "Were there 100 results?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Were there 100 results?": {
      "main": [
        [
          {
            "node": "Set: New Sync Date",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres: Save Last Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: New Sync Date": {
      "main": [
        [
          {
            "node": "Normalize syncDate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Save Last Date": {
      "main": [
        [
          {
            "node": "End of Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Compute Next Sync Date",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP: Get Auction Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "b5da3b60b2aef7f21cd63bb95b2dbf30be48f0e39c2c264cd2d36f457483d3a4"
  }
}
