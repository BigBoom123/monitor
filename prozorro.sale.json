{
  "nodes": [
    {
      "parameters": {},
      "id": "9078e4c5-2f4b-41a8-bc55-fef96020389d",
      "name": "Start Manually",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [-1856, 272]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS sync_state (\n  key   TEXT PRIMARY KEY,\n  value TIMESTAMPTZ\n);\n\nCREATE TABLE IF NOT EXISTS procedures (\n  _id TEXT PRIMARY KEY,\n  auction_id TEXT,\n  date_modified TIMESTAMPTZ,\n  title JSONB,\n  value_amount NUMERIC,\n  value_currency TEXT,\n  tender_period JSONB,\n  selling_entity JSONB,\n  raw JSONB\n);",
        "options": {}
      },
      "id": "461313da-ec96-407b-8b4b-2a5d4a50e4be",
      "name": "Postgres: Migrate",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [-1616, 272],
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COALESCE(\n  (SELECT value FROM sync_state WHERE key='prozorro_last_sync'),\n  '2025-01-01T00:00:00.000Z'::timestamptz\n) AS sync_date;",
        "options": {}
      },
      "id": "4a988ec3-f821-475b-a7c0-2c8ddf211ef1",
      "name": "Postgres: Get Sync Date",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [-1376, 272],
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "syncDate",
              "value": "={{$json.sync_date}}"
            }
          ]
        },
        "options": {}
      },
      "id": "84709019-675c-4f4f-b5ad-fdf6fec92829",
      "name": "Set: Prepare Sync Date",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [-1184, 272]
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-976, 272],
      "id": "6ef2c434-53be-42a7-843a-ef36a8e7011e",
      "name": "Loop Entry (Pass Through)"
    },
    {
      "parameters": {
        "url": "=https://procedure.prozorro.sale/api/search/byDateModified/{{$json.formattedSyncDate}}?limit=100\n",
        "options": {
          "timeout": 60000
        }
      },
      "id": "7ae09d66-3aea-49a0-a220-b91309a7d9c5",
      "name": "HTTP: Get Auction List",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [-592, 160]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "9b8f12f5-6852-4ce5-bcd2-31c050c9786c",
      "name": "Split In Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [80, 432]
    },
    {
      "parameters": {
        "url": "=https://procedure.prozorro.sale/api/procedures/{{$json._id}}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "55426ef4-d315-4234-ae72-3f7da2bcdba5",
      "name": "HTTP: Get Auction Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [240, 432]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = $json;\nconst locality = (data.sellingEntity?.address?.locality?.uk_UA || '').toLowerCase();\nconst targetLocalities = ['–∫–∏—ó–≤', '–≤–∏—à–≥–æ—Ä–æ–¥', '—ñ—Ä–ø—ñ–Ω—å'];\nconst isMatch = targetLocalities.includes(locality);\ndata.isRegionMatch = isMatch;\nreturn { json: data };"
      },
      "id": "e727ef73-87a8-474f-9d3f-76e698b4f49b",
      "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –†–µ–≥–∏–æ–Ω–∞",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [512, 432],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.isRegionMatch}}",
              "value2": true
            }
          ],
          "dateTime": [
            {
              "value1": "={{$json.tenderPeriod.startDate}}",
              "value2": "={{$now}}"
            }
          ],
          "number": [
            {
              "value1": "={{$json.value.amount}}",
              "operation": "smallerEqual",
              "value2": 4000000
            }
          ]
        }
      },
      "id": "638cac55-67af-448a-aa81-b1f4df6edcde",
      "name": "Filter Auctions",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [704, 432]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "titleText",
              "value": "={{$json.title.uk_UA}}"
            },
            {
              "name": "priceText",
              "value": "={{$json.value.amount}} {{$json.value.currency}}"
            },
            {
              "name": "auctionUrl",
              "value": "=https://prozorro.sale/auction/{{$json.auctionId}}"
            }
          ]
        },
        "options": {}
      },
      "id": "545db368-3a2d-4cf0-bb1a-509d51a54cfd",
      "name": "Set: Telegram Payload",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [864, 160]
    },
    {
      "parameters": {
        "chatId": "-1002767927753",
        "text": "üî• *–ù–æ–≤–∏–π –∞—É–∫—Ü—ñ–æ–Ω Prozorro.Sale!*\n\n*–ù–∞–∑–≤–∞:* {{$json.titleText}}\n*–°—Ç–∞—Ä—Ç–æ–≤–∞ —Ü—ñ–Ω–∞:* {{$json.priceText}}\n*–ü–æ—Å–∏–ª–∞–Ω–Ω—è:* {{$json.auctionUrl}}",
        "additionalFields": {}
      },
      "id": "8fb3e576-345c-4f88-b671-1fe14d6e3bf8",
      "name": "Send Telegram Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1056, 160],
      "webhookId": "5b27f88b-6c25-483d-847a-c2d4ac94b8d8",
      "credentials": {
        "telegramApi": {
          "id": "LuJyyclSEglS2sAm",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO procedures (\n  _id, auction_id, date_modified, title, value_amount, value_currency, tender_period, selling_entity, raw\n) VALUES (\n  $1, $2, $3::timestamptz, $4::jsonb, $5::numeric, $6::text, $7::jsonb, $8::jsonb, $9::jsonb\n)\nON CONFLICT (_id) DO UPDATE SET\n  auction_id = EXCLUDED.auction_id,\n  date_modified = EXCLUDED.date_modified,\n  title = EXCLUDED.title,\n  value_amount = EXCLUDED.value_amount,\n  value_currency = EXCLUDED.value_currency,\n  tender_period = EXCLUDED.tender_period,\n  selling_entity = EXCLUDED.selling_entity,\n  raw = EXCLUDED.raw;",
        "options": {
          "queryReplacement": "={{$json[\"_id\"]}}, {{$json[\"auctionId\"]}}, {{$json[\"dateModified\"] || $json[\"date_modified\"]}}, {{JSON.stringify($json[\"title\"])}}, {{$json[\"value\"]?.[\"amount\"]}}, {{$json[\"value\"]?.[\"currency\"]}}, {{JSON.stringify($json[\"tenderPeriod\"] || $json[\"tender_period\"])}}, {{JSON.stringify($json[\"sellingEntity\"] || $json[\"selling_entity\"])}}, {{JSON.stringify($json)}}"
        }
      },
      "id": "d043ff55-08a7-4bad-83f2-8f35d00a5d13",
      "name": "Postgres: Upsert Procedure",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1056, 368],
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "17434b8b-38f9-42fb-b1eb-cde481f976f9",
      "name": "Next Batch",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [1264, 272]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$input.all().length}}",
              "operation": "equal",
              "value2": 100
            }
          ]
        }
      },
      "id": "256538da-fa5f-42b0-81a4-269d198c9b69",
      "name": "Were there 100 results?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-224, -48]
    },
    {
      "parameters": {
        "jsCode": "// –ë–µ—Ä–µ–º–æ —É–≤–µ—Å—å –º–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤—ñ–¥ HTTP: Get Auction List\nconst list = items;\n\n// –Ø–∫—â–æ –º–∞—Å–∏–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî —Ç—Ä–∏–º–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –º–æ–º–µ–Ω—Ç (—â–æ–± –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç–∏—Å—å)\nif (!Array.isArray(list) || list.length === 0) {\n  const nowIso = new Date().toISOString().replace(/\\.(\\d{3})Z$/, '.$1000Z');\n  return [{ json: { syncDate: nowIso } }];\n}\n\n// –û—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è .at()\nconst last = list[list.length - 1].json;\n\n// –î—ñ—Å—Ç–∞—î–º–æ –¥–∞—Ç—É –∑–º—ñ–Ω–∏ (–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ –Ω–∞–∑–≤–∏)\nconst dm = last.dateModified ?? last.date_modified;\nconst d = new Date(dm);\n\n// –Ø–∫—â–æ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ ‚Äî –ø—ñ–¥—Å—Ç—Ä–∞—Ö—É—î–º–æ—Å—å –ø–æ—Ç–æ—á–Ω–∏–º —á–∞—Å–æ–º\nif (isNaN(d.getTime())) {\n  const nowIso = new Date().toISOString().replace(/\\.(\\d{3})Z$/, '.$1000Z');\n  return [{ json: { syncDate: nowIso } }];\n}\n\n// –ó—Å—É–≤–∞—î–º–æ –Ω–∞ +1 –º—Å —ñ –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ —Ñ–æ—Ä–º–∞—Ç—É –∑ 6 —Ü–∏—Ñ—Ä–∞–º–∏ –¥–æ 'Z'\nd.setMilliseconds(d.getMilliseconds() + 1);\nconst iso = d.toISOString().replace(/\\.(\\d{3})Z$/, '.$1000Z');\n\nreturn [{ json: { syncDate: iso } }];\n"
      },
      "id": "cfca2f3e-d57a-4743-85d6-0b3a9f0048a4",
      "name": "Compute Next Sync Date",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-16, 160]
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [288, -80],
      "id": "ef812e0c-53dd-42bb-988a-15b9d3dc00ca",
      "name": "Gate ‚Üí Loop (if 100)"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [256, 128],
      "id": "d40e483e-ab35-4e46-b4fb-27664334fa2a",
      "name": "Gate ‚Üí Save (if <100)"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO sync_state (key, value)\nVALUES ('prozorro_last_sync', $1::timestamptz)\nON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value;",
        "options": {}
      },
      "id": "f24c0e51-002b-4e7b-908f-7d262bc75628",
      "name": "Postgres: Save Last Date",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [464, 128],
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "id": "08ec8ae7-9603-489d-aefa-19631fb91b1a",
      "name": "End of Loop",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [656, 128]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// –ë–µ—Ä–µ–º–æ syncDate –∞–±–æ —Å—Ç–∞—Ä—Ç–æ–≤—É –¥–∞—Ç—É\nlet v = ($json.syncDate ?? '2025-01-01').toString().trim();\n\n// –Ø–∫—â–æ ISO –º–∞—î 3 –∑–Ω–∞–∫–∏ –º—Å (.SSSZ) ‚Äî –¥–æ–ø–∏—Å—É—î–º–æ —â–µ 000 ‚Üí .SSSSSSZ\nif (/\\.\\d{3}Z$/.test(v)) v = v.replace('Z', '000Z');\n\n// –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏/–ø–µ—Ä–µ–Ω–æ—Å–∏ (–Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫)\nv = v.replace(/\\s+/g, '');\n\n// –ü–û–í–ï–†–¢–ê–Ñ–ú–û –û–î–ò–ù –û–ë‚Äô–Ñ–ö–¢, –∞ –Ω–µ –º–∞—Å–∏–≤, —ñ –Ω–µ –≤—Ç—Ä–∞—á–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–ª—è\nreturn { json: { ...$json, formattedSyncDate: v } };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-752, 192],
      "id": "0873fda7-5ccf-45c8-95af-c316eca04db8",
      "name": "Normalize syncDate"
    },
    {
      "parameters": {
        "jsCode": "// –£–≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—Ö–æ–¥—É (HTTP)\nconst list = $input.all();              // –º–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Ñ–æ—Ä–º–∞—Ç—É { json: {...} }\n\n// –ü–µ—Ä—à–∏–π (—ñ —î–¥–∏–Ω–∏–π) –µ–ª–µ–º–µ–Ω—Ç –∑ –≤—É–∑–ª–∞ \"Normalize syncDate\"\nconst dateItem = $('Normalize syncDate').first();   // { json: {...} } –∞–±–æ undefined\n\n// –§–æ—Ä–º—É—î–º–æ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–∞—Ç–∏\nconst formatted =\n  dateItem?.json?.formattedSyncDate ??\n  dateItem?.json?.syncDate ??\n  '2025-01-01T00:00:00.000000Z';\n\n// –î–æ–¥–∞—î–º–æ formattedSyncDate –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞\nreturn list.map(i => ({\n  json: { ...i.json, formattedSyncDate: formatted },\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-288, 416],
      "id": "e91212d1-4875-428b-b367-8bc12cd7bde1",
      "name": "Code1"
    }
  ],
  "connections": {
    "Start Manually": {
      "main": [
        [
          {
            "node": "Postgres: Migrate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Migrate": {
      "main": [
        [
          {
            "node": "Postgres: Get Sync Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Get Sync Date": {
      "main": [
        [
          {
            "node": "Set: Prepare Sync Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Prepare Sync Date": {
      "main": [
        [
          {
            "node": "Loop Entry (Pass Through)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Entry (Pass Through)": {
      "main": [
        [
          {
            "node": "Normalize syncDate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Get Auction List": {
      "main": [
        [
          {
            "node": "Were there 100 results?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Compute Next Sync Date",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches": {
      "main": [
        [
          {
            "node": "HTTP: Get Auction Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Get Auction Details": {
      "main": [
        [
          {
            "node": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –†–µ–≥–∏–æ–Ω–∞",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –†–µ–≥–∏–æ–Ω–∞": {
      "main": [
        [
          {
            "node": "Filter Auctions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Auctions": {
      "main": [
        [
          {
            "node": "Set: Telegram Payload",
            "type": "main",
            "index": 0
          },
          {
            "node": "Postgres: Upsert Procedure",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres: Upsert Procedure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Telegram Payload": {
      "main": [
        [
          {
            "node": "Send Telegram Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Upsert Procedure": {
      "main": [
        [
          {
            "node": "Next Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Were there 100 results?": {
      "main": [
        [
          {
            "node": "Gate ‚Üí Loop (if 100)",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Gate ‚Üí Save (if <100)",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Compute Next Sync Date": {
      "main": [
        [
          {
            "node": "Gate ‚Üí Save (if <100)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Gate ‚Üí Loop (if 100)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gate ‚Üí Loop (if 100)": {
      "main": [
        [
          {
            "node": "Loop Entry (Pass Through)",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Gate ‚Üí Save (if <100)": {
      "main": [
        [
          {
            "node": "Postgres: Save Last Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Save Last Date": {
      "main": [
        [
          {
            "node": "End of Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize syncDate": {
      "main": [
        [
          {
            "node": "HTTP: Get Auction List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b5da3b60b2aef7f21cd63bb95b2dbf30be48f0e39c2c264cd2d36f457483d3a4"
  }
}
