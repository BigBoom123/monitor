{
  "nodes": [
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "id": "05ab86e7-9bdf-40fb-ac13-1fc5427dbde2",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [-272, 128]
    },
    {
      "parameters": {
        "url": "={{ 'https://procedure.prozorro.sale/api/procedures/' + encodeURIComponent(String($json._id ?? $json.auctionId ?? $json.id).trim()) }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "0a7f16b5-0c01-4279-9be9-4a2f609621fe",
      "name": "HTTP: Get Auction Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [160, 128]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.to_notify}}"
            }
          ]
        }
      },
      "id": "8ed6e72a-711d-40f7-aa57-4dad853bfabd",
      "name": "Filter Auctions",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [560, 128]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "titleText",
              "value": "={{$json.title.uk_UA}}"
            },
            {
              "name": "priceText",
              "value": "={{$json.value.amount}} {{$json.value.currency}}"
            },
            {
              "name": "auctionUrl",
              "value": "=https://prozorro.sale/auction/{{$json.auctionId}}"
            },
            {
              "name": "–û–ø–∏—Å",
              "value": "={{ $json.items[0]?.description?.uk_UA ?? '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "695b48da-4082-4fb1-83dc-f9dcbe1b8eb5",
      "name": "Set: Telegram Payload",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [1184, 32]
    },
    {
      "parameters": {
        "chatId": "-1002767927753",
        "text": "üî• *–ù–æ–≤–∏–π –∞—É–∫—Ü—ñ–æ–Ω Prozorro.Sale!*\n    *–ù–∞–∑–≤–∞:*\n    {{$json.titleText}}\n    \n    *–û–ø–∏—Å:*\n    {{$json.descriptionText}}\n    \n    *–°—Ç–∞—Ä—Ç–æ–≤–∞ —Ü—ñ–Ω–∞:*\n    {{$json.priceText}}\n   \n    *–ü–æ—Å–∏–ª–∞–Ω–Ω—è:*\n    {{$json.auctionUrl}}",
        "additionalFields": {}
      },
      "id": "2c9389cd-9140-4663-acdd-166dbd3b7202",
      "name": "Send Telegram Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1376, 32],
      "webhookId": "660f874f-3c75-40b4-89a8-4d3cb4e98faf",
      "credentials": {
        "telegramApi": {
          "id": "LuJyyclSEglS2sAm",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO salesfull_v1 (_id, auction_id, date_modified, title, value_amount, value_currency, tender_period, selling_entity, registration_details, classification, qualification_period, status, registration_status, registration_id, registration_date, raw)\nVALUES ($1, $2, $3::timestamptz, $4::jsonb, $5::numeric, $6::text, $7::jsonb, $8::jsonb, $9::jsonb, $10::jsonb, $11::jsonb, $12::text, $13::text, $14::text, $15::timestamptz, $16::jsonb)\nON CONFLICT (_id) DO UPDATE SET auction_id=EXCLUDED.auction_id, date_modified=EXCLUDED.date_modified, title=EXCLUDED.title, value_amount=EXCLUDED.value_amount, value_currency=EXCLUDED.value_currency, tender_period=EXCLUDED.tender_period, selling_entity=EXCLUDED.selling_entity, registration_details=EXCLUDED.registration_details, classification=EXCLUDED.classification, qualification_period=EXCLUDED.qualification_period, status=EXCLUDED.status, registration_status=EXCLUDED.registration_status, registration_id=EXCLUDED.registration_id, registration_date=EXCLUDED.registration_date, raw=EXCLUDED.raw;",
        "options": {
          "queryReplacement": "={{ [\n  $('HTTP: Get Auction Details').item.json[\"_id\"] ?? $('HTTP: Get Auction Details').item.json[\"auctionId\"] ?? $('HTTP: Get Auction Details').item.json[\"id\"],\n  $('HTTP: Get Auction Details').item.json[\"auctionId\"] ?? $('HTTP: Get Auction Details').item.json[\"_id\"],\n  ( $('HTTP: Get Auction Details').item.json[\"dateModified\"] || $('HTTP: Get Auction Details').item.json[\"date_modified\"] ) ? new Date( $('HTTP: Get Auction Details').item.json[\"dateModified\"] || $('HTTP: Get Auction Details').item.json[\"date_modified\"] ).toISOString() : null,\n  JSON.stringify( $('HTTP: Get Auction Details').item.json[\"title\"] ?? null ),\n  $('HTTP: Get Auction Details').item.json[\"value\"]?.[\"amount\"] ?? null,\n  $('HTTP: Get Auction Details').item.json[\"value\"]?.[\"currency\"] ?? null,\n  JSON.stringify( $('HTTP: Get Auction Details').item.json[\"tenderPeriod\"] ?? $('HTTP: Get Auction Details').item.json[\"tender_period\"] ?? null ),\n  JSON.stringify( $('HTTP: Get Auction Details').item.json[\"sellingEntity\"] ?? $('HTTP: Get Auction Details').item.json[\"selling_entity\"] ?? null ),\n  JSON.stringify( $('HTTP: Get Auction Details').item.json[\"registrationDetails\"] ?? $('HTTP: Get Auction Details').item.json[\"registration_details\"] ?? null ),\n  JSON.stringify( $('HTTP: Get Auction Details').item.json[\"classification\"] ?? null ),\n  JSON.stringify( $('HTTP: Get Auction Details').item.json[\"qualificationPeriod\"] ?? $('HTTP: Get Auction Details').item.json[\"qualification_period\"] ?? null ),\n  $('HTTP: Get Auction Details').item.json[\"status\"] ?? null,\n  $('HTTP: Get Auction Details').item.json[\"registrationStatus\"] ?? $('HTTP: Get Auction Details').item.json[\"registration_status\"] ?? null,\n  $('HTTP: Get Auction Details').item.json[\"registrationId\"] ?? $('HTTP: Get Auction Details').item.json[\"registration_id\"] ?? null,\n  ( $('HTTP: Get Auction Details').item.json[\"registrationDate\"] || $('HTTP: Get Auction Details').item.json[\"registration_date\"] ) ? new Date( $('HTTP: Get Auction Details').item.json[\"registrationDate\"] || $('HTTP: Get Auction Details').item.json[\"registration_date\"] ).toISOString() : null,\n  JSON.stringify( $('HTTP: Get Auction Details').item.json )\n] }}"
        }
      },
      "id": "e5eb5d13-9766-42ce-a3b5-b71ed3c483a0",
      "name": "Postgres: Upsert Procedure",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1168, 224],
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "id": "a4c134eb-87a7-42d7-a177-47debdfbade9",
      "name": "Next Batch",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [1376, 224]
    },
    {
      "parameters": {},
      "id": "e6919e8f-c4f1-4f08-88c5-e3310cc5c1e7",
      "name": "End",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [48, -80]
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [-608, 128],
      "id": "f3d14d21-f1b8-4196-b5cb-fc897146c0be",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// --- –ù–ê–°–¢–†–û–ô–ö–ò –§–ò–õ–¨–¢–†–ê ---\nconst MAX_PRICE = 4000000;\nconst TARGET_LOCALITIES = ['–∫–∏—ó–≤', '–≤–∏—à–≥–æ—Ä–æ–¥', '—ñ—Ä–ø—ñ–Ω—å'];\nconst TARGET_SELLERS = [];\nconst KEYWORDS_IN_TITLE = [];\nconst EXCLUDED_KEYWORDS_IN_TITLE = ['—Ä–µ–∫–ª–∞–º', '–±—ñ–ª–±–æ—Ä–¥'];\n// --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---\n\nconst auction = $json;\nconst now = new Date();\n\nfunction get(path, defaultValue = null) {\n  return path.reduce((obj, key) => (obj && obj[key] != null) ? obj[key] : defaultValue, auction);\n}\n\n// --- 1. –ì–õ–ê–í–ù–´–ô –§–ò–õ–¨–¢–†: –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨ –ê–£–ö–¶–ò–û–ù–ê ---\nconst status = get(['status'], '');\nconst tenderEndDateStr = get(['tenderPeriod', 'endDate']);\n\nif (status !== 'active.tendering') {\n  return { json: { ...auction, to_notify: false, reason: `–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${status}` } };\n}\nif (!tenderEndDateStr || new Date(tenderEndDateStr) < now) {\n  return { json: { ...auction, to_notify: false, reason: '–ü–µ—Ä–∏–æ–¥ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –∏—Å—Ç–µ–∫' } };\n}\n\n// --- 2. –í–¢–û–†–ò–ß–ù–´–ï –§–ò–õ–¨–¢–†–´ –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú ---\n\n// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ü–µ–Ω–µ\nif (MAX_PRICE !== null && get(['value', 'amount'], Infinity) > MAX_PRICE) {\n  return { json: { ...auction, to_notify: false, reason: `–¶–µ–Ω–∞ –≤—ã—à–µ ${MAX_PRICE}` } };\n}\n\n// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É\nif (TARGET_LOCALITIES.length > 0) {\n  const locality = (get(['items', 0, 'address', 'locality', 'uk_UA'], '')).toLowerCase();\n  // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∑–∞–¥–∞–Ω, —Ç–æ —É –∞—É–∫—Ü–∏–æ–Ω–∞ –î–û–õ–ñ–ï–ù –±—ã—Ç—å –≥–æ—Ä–æ–¥ –∏ –æ–Ω –î–û–õ–ñ–ï–ù –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ.\n  if (!locality || !TARGET_LOCALITIES.includes(locality)) {\n    return { json: { ...auction, to_notify: false, reason: `–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥–æ—Ä–æ–¥: '${locality}'` } };\n  }\n}\n\n// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–≤—Ü—É\nif (TARGET_SELLERS.length > 0) {\n  const sellerId = get(['sellingEntity', 'identifier', 'id'], '');\n  if (!TARGET_SELLERS.includes(sellerId)) {\n    return { json: { ...auction, to_notify: false, reason: '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü' } };\n  }\n}\n\n// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\nconst title = (get(['title', 'uk_UA'], '')).toLowerCase();\nif (KEYWORDS_IN_TITLE.length > 0) {\n  if (!KEYWORDS_IN_TITLE.some(keyword => title.includes(keyword.toLowerCase()))) {\n    return { json: { ...auction, to_notify: false, reason: '–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏' } };\n  }\n}\nif (EXCLUDED_KEYWORDS_IN_TITLE.length > 0) {\n  if (EXCLUDED_KEYWORDS_IN_TITLE.some(keyword => title.includes(keyword.toLowerCase()))) {\n    return { json: { ...auction, to_notify: false, reason: '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–ª–æ–≤–æ-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ' } };\n  }\n}\n\n// --- –ï–°–õ–ò –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ ---\nreturn { json: { ...auction, to_notify: true, reason: '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º' } };"
      },
      "id": "d1c183e5-2591-48f1-93fe-0e7eeaca75b0",
      "name": "–§–∏–ª—å—Ç—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [368, 128]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "151347b9-fe3b-4108-983e-aba0994f6983",
              "leftValue": "={{ $json._id ?? $json.auctionId ?? $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-64, 256],
      "id": "e5a684c7-e8b7-4641-80bc-53bb1092bd11",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO filtered_sales_v1 (_id, auction_id, date_modified, title, value_amount, value_currency, tender_period, selling_entity, registration_details, classification, qualification_period, status, registration_status, registration_id, registration_date, raw)\nVALUES ($1, $2, $3::timestamptz, $4::jsonb, $5::numeric, $6::text, $7::jsonb, $8::jsonb, $9::jsonb, $10::jsonb, $11::jsonb, $12::text, $13::text, $14::text, $15::timestamptz, $16::jsonb)\nON CONFLICT (_id) DO UPDATE SET auction_id=EXCLUDED.auction_id, date_modified=EXCLUDED.date_modified, title=EXCLUDED.title, value_amount=EXCLUDED.value_amount, value_currency=EXCLUDED.value_currency, tender_period=EXCLUDED.tender_period, selling_entity=EXCLUDED.selling_entity, registration_details=EXCLUDED.registration_details, classification=EXCLUDED.classification, qualification_period=EXCLUDED.qualification_period, status=EXCLUDED.status, registration_status=EXCLUDED.registration_status, registration_id=EXCLUDED.registration_id, registration_date=EXCLUDED.registration_date, raw=EXCLUDED.raw;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [768, 32],
      "id": "2b3d27d2-02ec-42d2-96c2-481d5be3a97b",
      "name": "Filtred",
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    }
  ],
  "connections": {
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "End",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Get Auction Details": {
      "main": [
        [
          {
            "node": "–§–∏–ª—å—Ç—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Auctions": {
      "main": [
        [
          {
            "node": "Postgres: Upsert Procedure",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filtred",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres: Upsert Procedure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Telegram Payload": {
      "main": [
        [
          {
            "node": "Send Telegram Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Upsert Procedure": {
      "main": [
        [
          {
            "node": "Next Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Next Batch": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–§–∏–ª—å—Ç—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": {
      "main": [
        [
          {
            "node": "Filter Auctions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "HTTP: Get Auction Details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Next Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtred": {
      "main": [
        [
          {
            "node": "Set: Telegram Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b5da3b60b2aef7f21cd63bb95b2dbf30be48f0e39c2c264cd2d36f457483d3a4"
  }
}
