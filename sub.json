{
  "nodes": [
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "id": "9ee12651-2b02-4c32-a015-0792d8d06c60",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [-272, 128]
    },
    {
      "parameters": {
        "url": "={{ 'https://procedure.prozorro.sale/api/procedures/' + encodeURIComponent(String($json._id ?? $json.auctionId ?? $json.id).trim()) }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "254adc18-1990-40eb-8a71-404cb9be984d",
      "name": "HTTP: Get Auction Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [-48, 128]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = $json;\nconst locality = (data.sellingEntity?.address?.locality?.uk_UA || '').toLowerCase();\nconst targetLocalities = ['–∫–∏—ó–≤','–≤–∏—à–≥–æ—Ä–æ–¥','—ñ—Ä–ø—ñ–Ω—å'];\nconst isMatch = targetLocalities.includes(locality);\nreturn { json: { ...data, isRegionMatch: isMatch } };"
      },
      "id": "4ed905dd-667b-4bd3-b6cf-587d2933760d",
      "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –†–µ–≥–∏–æ–Ω–∞",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [160, 128]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.isRegionMatch}}",
              "value2": true
            }
          ],
          "dateTime": [
            {
              "value1": "={{$json.tenderPeriod.startDate}}",
              "value2": "={{$now}}"
            }
          ],
          "number": [
            {
              "value1": "={{$json.value.amount}}",
              "operation": "smallerEqual",
              "value2": 4000000
            }
          ]
        }
      },
      "id": "ca54bbd5-4679-44ae-9352-6d5aeb527f1b",
      "name": "Filter Auctions",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [352, 128]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "titleText",
              "value": "={{$json.title.uk_UA}}"
            },
            {
              "name": "priceText",
              "value": "={{$json.value.amount}} {{$json.value.currency}}"
            },
            {
              "name": "auctionUrl",
              "value": "=https://prozorro.sale/auction/{{$json.auctionId}}"
            }
          ]
        },
        "options": {}
      },
      "id": "cd03925b-5144-4ef6-9dfd-ce0af99bf687",
      "name": "Set: Telegram Payload",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [560, 32]
    },
    {
      "parameters": {
        "chatId": "-1002767927753",
        "text": "üî• *–ù–æ–≤–∏–π –∞—É–∫—Ü—ñ–æ–Ω Prozorro.Sale!*\n\n*–ù–∞–∑–≤–∞:* {{$json.titleText}}\n*–°—Ç–∞—Ä—Ç–æ–≤–∞ —Ü—ñ–Ω–∞:* {{$json.priceText}}\n*–ü–æ—Å–∏–ª–∞–Ω–Ω—è:* {{$json.auctionUrl}}",
        "additionalFields": {}
      },
      "id": "619b1720-64ea-4258-bf7a-104238dc3188",
      "name": "Send Telegram Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [752, 32],
      "webhookId": "5dd5c2d7-1468-49e8-8c04-42803db6b9d2",
      "credentials": {
        "telegramApi": {
          "id": "LuJyyclSEglS2sAm",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO salesfull_v1 (_id, auction_id, date_modified, title, value_amount, value_currency, tender_period, selling_entity, registration_details, classification, qualification_period, status, registration_status, registration_id, registration_date, raw)\nVALUES ($1, $2, $3::timestamptz, $4::jsonb, $5::numeric, $6::text, $7::jsonb, $8::jsonb, $9::jsonb, $10::jsonb, $11::jsonb, $12::text, $13::text, $14::text, $15::timestamptz, $16::jsonb)\nON CONFLICT (_id) DO UPDATE SET auction_id=EXCLUDED.auction_id, date_modified=EXCLUDED.date_modified, title=EXCLUDED.title, value_amount=EXCLUDED.value_amount, value_currency=EXCLUDED.value_currency, tender_period=EXCLUDED.tender_period, selling_entity=EXCLUDED.selling_entity, registration_details=EXCLUDED.registration_details, classification=EXCLUDED.classification, qualification_period=EXCLUDED.qualification_period, status=EXCLUDED.status, registration_status=EXCLUDED.registration_status, registration_id=EXCLUDED.registration_id, registration_date=EXCLUDED.registration_date, raw=EXCLUDED.raw;",
        "options": {
          "queryReplacement": "={{ [\n  $('HTTP: Get Auction Details').item.json[\"_id\"] ?? $('HTTP: Get Auction Details').item.json[\"auctionId\"] ?? $('HTTP: Get Auction Details').item.json[\"id\"],\n  $('HTTP: Get Auction Details').item.json[\"auctionId\"] ?? $('HTTP: Get Auction Details').item.json[\"_id\"],\n  ( $('HTTP: Get Auction Details').item.json[\"dateModified\"] || $('HTTP: Get Auction Details').item.json[\"date_modified\"] ) ? new Date( $('HTTP: Get Auction Details').item.json[\"dateModified\"] || $('HTTP: Get Auction Details').item.json[\"date_modified\"] ).toISOString() : null,\n  JSON.stringify( $('HTTP: Get Auction Details').item.json[\"title\"] ?? null ),\n  $('HTTP: Get Auction Details').item.json[\"value\"]?.[\"amount\"] ?? null,\n  $('HTTP: Get Auction Details').item.json[\"value\"]?.[\"currency\"] ?? null,\n  JSON.stringify( $('HTTP: Get Auction Details').item.json[\"tenderPeriod\"] ?? $('HTTP: Get Auction Details').item.json[\"tender_period\"] ?? null ),\n  JSON.stringify( $('HTTP: Get Auction Details').item.json[\"sellingEntity\"] ?? $('HTTP: Get Auction Details').item.json[\"selling_entity\"] ?? null ),\n  JSON.stringify( $('HTTP: Get Auction Details').item.json[\"registrationDetails\"] ?? $('HTTP: Get Auction Details').item.json[\"registration_details\"] ?? null ),\n  JSON.stringify( $('HTTP: Get Auction Details').item.json[\"classification\"] ?? null ),\n  JSON.stringify( $('HTTP: Get Auction Details').item.json[\"qualificationPeriod\"] ?? $('HTTP: Get Auction Details').item.json[\"qualification_period\"] ?? null ),\n  $('HTTP: Get Auction Details').item.json[\"status\"] ?? null,\n  $('HTTP: Get Auction Details').item.json[\"registrationStatus\"] ?? $('HTTP: Get Auction Details').item.json[\"registration_status\"] ?? null,\n  $('HTTP: Get Auction Details').item.json[\"registrationId\"] ?? $('HTTP: Get Auction Details').item.json[\"registration_id\"] ?? null,\n  ( $('HTTP: Get Auction Details').item.json[\"registrationDate\"] || $('HTTP: Get Auction Details').item.json[\"registration_date\"] ) ? new Date( $('HTTP: Get Auction Details').item.json[\"registrationDate\"] || $('HTTP: Get Auction Details').item.json[\"registration_date\"] ).toISOString() : null,\n  JSON.stringify( $('HTTP: Get Auction Details').item.json )\n] }}"
        }
      },
      "id": "96dac513-192a-4ae2-beeb-e3d2bd01dfe7",
      "name": "Postgres: Upsert Procedure",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [752, 224],
      "credentials": {
        "postgres": {
          "id": "pZUsVvYuYQh5b91f",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "id": "336d9f04-bfe9-4624-a9da-c6ee805649f7",
      "name": "Next Batch",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [960, 224]
    },
    {
      "parameters": {},
      "id": "48ab38fa-4c3c-4ac3-ad7f-a171b563ff25",
      "name": "End",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [-160, -80]
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [-608, 128],
      "id": "874237fc-40fd-4efb-9877-796125a19ed4",
      "name": "When Executed by Another Workflow"
    }
  ],
  "connections": {
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "End",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP: Get Auction Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Get Auction Details": {
      "main": [
        [
          {
            "node": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –†–µ–≥–∏–æ–Ω–∞",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –†–µ–≥–∏–æ–Ω–∞": {
      "main": [
        [
          {
            "node": "Filter Auctions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Auctions": {
      "main": [
        [
          {
            "node": "Set: Telegram Payload",
            "type": "main",
            "index": 0
          },
          {
            "node": "Postgres: Upsert Procedure",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres: Upsert Procedure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Telegram Payload": {
      "main": [
        [
          {
            "node": "Send Telegram Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: Upsert Procedure": {
      "main": [
        [
          {
            "node": "Next Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Next Batch": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "b5da3b60b2aef7f21cd63bb95b2dbf30be48f0e39c2c264cd2d36f457483d3a4"
  }
}
